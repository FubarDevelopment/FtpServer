{
  "Serilog": {
    "Using":  ["Serilog.Sinks.Console"],
    "MinimumLevel":{
      "Default": "Debug",
      "Override": {
        "Microsoft": "Information",
        "FubarDev.FtpServer.CommandHandlers.ListCommandHandler": "Verbose",
        "FubarDev.FtpServer.CommandHandlers.MlstCommandHandler": "Verbose"
      }
    },
     "WriteTo": [
      {
        "Name": "Console",
        "OutputTemplate": "[{Timestamp:HH:mm:ss} {Level:u3}] {ConnectionId} {Message:lj}{NewLine}{Exception}"
      }
    ],
    "Enrich": ["FromLogContext"]
  },

  /* Supported authentication types are: "custom","anonymous", "pam", "default".
   * "default" means "not set" and is equal to "anonymous". */
  "authentication": "default",

  /* Sets the user id and group id for file system operations when
   * authentication is "pam" and "backend" is "unix". */
  "setFileSystemId": true,

  /* Set the umask if not null.
   * Octal values must be written as string (e.g. "0002") */
  "umask": null,

  "pam": {
    /* Disable PAM account management. Needed as workaround for WSL. */
    "noAccountManagement": false
  },

  /* Generic server settings */
  "server": {
    /* supported special addresses: "0.0.0.0", "::", "*" */
    "address": null,
    /* defaults to 21 or 990 (when implicit AUTH TLS is active) */
    "port": null,
    /* Set to true to bind active data connections to FTP-DATA (port-1) */
    "useFtpDataPort": false,
    /* Set to the maximum number of connections. A value of 0 (default) means that the connections aren't limited. */
    "maxActiveConnections": null,
    /* Sets the interval between checks for expired connections in seconds. */
    "connectionInactivityCheckInterval": 60,
    /* PASV/EPSV-specific options */
    "pasv": {
      /* PASV port range in the form "from:to" (inclusive) */
      "range": null,
      /* Allow promiscuous PASV (IOW: Allow data connection to different IP than remote IP of control connection) */
      "promiscuous": false
    }
  },

  /* Connection-related configuration */
  "connection": {
    /* Configuration for inactivity checks */
    "inactivity": {
      /* Is the inactivity check enabled? */
      "enabled": false,
      /* Sets the inactivity timeout for connections in seconds. */
      "inactivityTimeout": 300
    },
    /* Configuration for socket state checks */
    "socketState": {
      /* Is the socket state check enabled? */
      "enabled": false
    }
  },

  /* Settings for FTPS support. */
  "ftps": {
    /* Path to the X.509 certificate.
     * It may either be a certificate or a PKCS#12-file with private key. */
    "certificate": null,
    /* Path to private key for the certificate. */
    "privateKey": null,
    /* Password used to decrypt the PFX file. */
    "password": null,
    /* Use implicit AUTH TLS? */
    "implicit": false
  },

  /* File system layout
   *
   * Only works for "filesystem" and "unix" backends.
   *
   * Available options are:
   * - "single-root": Same chroot for all users
   * - "root-per-user": chroot on root/username
   * - "pam-home": Same root for all users, $HOME is default directory (only available with "pam" authentication)
   * - "pam-home-chroot": chroot on $HOME (only available with "pam" authentication)
   *
   * The root for anonymous users when selecting "pam-home" or "pam-home-chroot" is either /tmp or %TEMP%.
   * */
  "layout": "single-root",

  /* Backend section */

  /* Select one of the backend types below. */
  "backend": "system-io",

  /* Use System.IO-based file system access. */
  "systemIo": {
    /* Defaults to /tmp or %TEMP% */
    "root": null,
    /* Should the data be flushed to disk after every write operation? Default value is false. */
    "flushAfterWrite": false
  },

  /* Use the native Linux API for file system access. */
  "unix": {
    /* Defaults to "/" or whatever the authentication method returns as root */
    "root": null,
    /* Should the data be flushed to disk after every write operation? Default value is false. */
    "flushAfterWrite": false
  },

  /* Use an in-memory file system (per-user) */
  "inMemory": {
    /* Keep anonymous instances? */
    "keepAnonymous": false
  },

  /* Use Google Drive as backend.
   * Has to be selected as "google-drive:user" or "google-drive:service" */
  "googleDrive": {
    /* Are the files uploaded in the background?
     * The file information will be faked by the server and the client sees a completely uploaded file.
     * This feature was required for earlier versions of the Google Drive API. */
    "backgroundUpload": false,
    /* Use a users Google Drive as file system */
    "user": {
      /* Path to client secrets file. */
      "clientSecrets": null,
      /* Name of the user */
      "userName": null,
      /* Refresh OAuth token on start. */
      "refreshToken": false
    },
    /* Use a users Google Drive with a service account */
    "service": {
      /* A credential file for a service. */
      "credentialFile": null
    }
  },

  /* Use Amazon S3 as backend. */
  "amazonS3": {
    /* The bucket region, for example "us-west-1" */
    "bucketRegion": null,
    /* The bucket name */
    "bucketName": null,
    /* The AWS access key */
    "awsAccessKeyId": null,
    /* The AWS secret key */
    "awsSecretAccessKey": null
  },

  /* Use Azure Blob Storage as backend */
  "azureblobstorage": {
    /* Name of the root path */
    "rootPath":  null,
    /* Name of the container */
    "containerName": null,
    /* Connection string to the blob storage */
    "connectionString": null
  }
}

